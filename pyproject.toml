[project]
name = "temporal-otel"
version = "0.1.0"
description = "Sample for working with Temporal OpenTelemetry integration."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "aiohttp==3.12.14",
    "opentelemetry-api==1.35.0",
    "opentelemetry-exporter-otlp-proto-grpc==1.35.0",
    "opentelemetry-instrumentation-aiohttp-client==0.56b0",
    "opentelemetry-sdk==1.35.0",
    "pydantic-settings==2.10.1",
    "temporalio==1.14.1",
]

[dependency-groups]
dev = [
    "poethepoet>=0.36.0",
    "ruff>=0.12.5",
]

[tool.ruff]
exclude = [
    ".git",
    ".idea",
    ".mypy_cache",
    ".tox",
    ".venv"
]
target-version = "py312"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "INP001", # require __init__,py
    "D401", # first line should be in imperative mood
    "A002", # re-define Python builtin
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.ruff.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.poe]
executor.type = "uv"

[tool.poe.tasks.lint]
help = "Run the linter."
cmd = "ruff check ."

[tool.poe.tasks.format]
help = "Run the formatter."
cmd = "ruff format ."

[tool.poe.tasks.worker]
help = "Run the worker."
cmd = "python -m python.worker"
env = { PYTHONPATH = "." }

[tool.poe.tasks.client]
help = "Run the Workflow client."
cmd = "python -m python.client"
env = { PYTHONPATH = "." }

[tool.poe.tasks.up]
help = "Start Docker Compose with specified profile."
cmd = "docker compose --profile ${profile} up --build"
args = [
  { name = "profile", help = "Profiles to use (`default`, `dynatrace` or `elk`).", default = "default"}
]
